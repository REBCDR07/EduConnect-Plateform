// client/src/services/authService.js
import { 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut 
} from "firebase/auth";
import { doc, setDoc, getDoc } from "firebase/firestore"; 
import { auth, db } from '../firebase'; // On importe nos services Firebase

// ----- VERSION INSCRIPTION -----
// Cr√©e l'utilisateur dans "Authentication" ET ses infos dans "Firestore"
const registerUser = async (userData) => {
  const { email, password, firstName, lastName, role } = userData;
  
  console.log("üïµÔ∏è [authService] D√©but de l'inscription pour:", email);
  // 1. Cr√©e l'utilisateur dans Firebase Auth
  const userCredential = await createUserWithEmailAndPassword(auth, email, password);
  const user = userCredential.user;
  console.log("‚úÖ Utilisateur cr√©√© dans Firebase Auth (UID):", user.uid);

  // 2. Stocke les infos suppl√©mentaires (r√¥le, nom) dans Firestore
  await setDoc(doc(db, "users", user.uid), {
    firstName,
    lastName,
    role
  });
  console.log("‚úÖ Informations utilisateur sauvegard√©es dans Firestore.");

  return user;
};

// ----- VERSION CONNEXION -----
// V√©rifie les identifiants et r√©cup√®re les donn√©es compl√®tes de l'utilisateur
const loginUser = async (email, password) => {
  console.log("üïµÔ∏è [authService] Tentative de connexion pour:", email);
  // 1. Firebase v√©rifie l'email et le mot de passe
  const userCredential = await signInWithEmailAndPassword(auth, email, password);
  console.log("‚úÖ Authentification Firebase r√©ussie pour:", userCredential.user.email);
  
  // 2. On r√©cup√®re le r√¥le et le nom depuis Firestore
  const userDocRef = doc(db, "users", userCredential.user.uid);
  const userDoc = await getDoc(userDocRef);

  if (userDoc.exists()) {
    console.log("‚úÖ R√¥le et nom r√©cup√©r√©s depuis Firestore:", userDoc.data());
    // On fusionne l'objet de Firebase Auth avec nos donn√©es de Firestore
    const fullUserData = {
        uid: userCredential.user.uid,
        email: userCredential.user.email,
        ...userDoc.data()
    };
    return fullUserData;
  } else {
    // Cas peu probable o√π l'utilisateur existe dans Auth mais pas dans Firestore
    console.error("‚ùå Utilisateur authentifi√© mais aucune donn√©e trouv√©e dans Firestore !");
    return userCredential.user;
  }
};

// ----- VERSION D√âCONNEXION -----
const logoutUser = () => signOut(auth);

// On exporte un objet simple avec les fonctions renomm√©es pour plus de clart√©
const authService = {
  register: registerUser,
  login: loginUser,
  logout: logoutUser,
};

export default authService;